**************************************************
  ANL Next
  Version: 1.0
  Author: Hirokazu Odaka

**************************************************
*
*   1. Introduction
*
**************************************************

  ANL Next is a framework to generate software which performs event-by-event analysis. The event-by-event analysis is defined as data analysis which treats a list of event entries as input and performs something interesting for each event entry. Since algorithm for each entry must be identical for each event, the entire program consists of a loop of a procedure which realize the algorithm for all the entires. We usually need such a data processing for experimental data obtained with radiation detectors.

  This framework is originated by the ANL++ framework (by Shin Watanabe), which is C++ implementation of ANL. ANL is a fundamental framework of event-by-event analysis, which has been used for data processing of X-ray detectors on board ASCA and Suzaku X-ray observatories.

  As ANL Next adopts the ANL concept, we have written the code completely from scratch. This framework is written in C++, and provides Ruby binding for dynamical and flexible use of analysis software.

**************************************************
*
*   2. Contact
*
**************************************************

Hirokazu Odaka 
ISAS/JAXA
odaka(AT)astro.isas.jaxa.jp

**************************************************
*
*   3. Supported System
*
**************************************************

- Mac OS X (the author's standard environment)
- Linux (will be supported)

**************************************************
*
*   4. Required software
*
**************************************************

a) C++ compliler

b) CMake (Cross platform make)
[version 2.8 or later]
For easy installation, this package uses CMake to generate building tools such as Makefile.

c) Boost C++ library
[version 1.47.0 or later]
Because ANL Next uses "header-only" libraries of Boost, you do not need to build the library. Just uncompress the Boost package and place it to location you want to install. Then, register its location to header including path of C++ compiler. For example, add to .bashrc the line below:

% export CPLUS_INCLUDE_PATH=${CPLUS_INCLUDE_PATH}:pass/to/boost

d) Ruby (option)
[version 1.8.6 or later]
ANL Next provides a Ruby extended library, which is generated by SWIG, as interface to operate an analysis software generated by this framework. Ruby is a scriptable, dynamic, object-orriented programming language, and offers powerful and flexible interface to control the user program. Ruby is widely used in the world, and is easy to learn like Python. This is optional but very useful for productive data analysis.

e) SWIG (Simplified Wrapper and Interface Generator) (option)
[version 2.0 or later]
As SWIG provides an easy way to generate extended libraries of various scripting languages, ANL Next uses SWIG for making Ruby binding of itself.

f) CLHEP (option)
[version 2.1 or later]
A class library for high energy physics. This is required by Geant4 simulations.

g) ROOT (option)
[version 5.28 or later]
A data analysis framework.

**************************************************
*
*   5. Installation
*
**************************************************

1) Obtain ANL Next.

% git clone git://github.com/odakahirokazu/ANLNext.git

2) We strongly recomend out-of-source building, in which building does not affect the source directory. Create a directory for building outside the source directory.

% cd ANLNext
% mkdir build
% cd build

3) Perform cmake to generate Makefiles. There are several options:
 - USE_TVector [Default=OFF]: enable ROOT vector.
 - USE_HepVector [Default=OFF]: enable CLHEP vector.
 - USE_Ruby [Default=ON]: enable Ruby binding.
 - USE_All [Default=OFF]: enable all libraries.

% cmake ../ [options]

If you want to use vector libraries of ROOT and CLHEP, perform below:

% cmake ../ -DUSE_TVector=ON -DUSE_HepVector=ON
or
% cmake ../ -DUSE_All=ON

4) Make

% make

5) Install

By default, "make install" will install binaries and libraries into the user's home directory, such as ${HOME}/bin or ${HOME}/lib.

% make install

6) Set environment variable ANLNEXT_TOP as a path to the source tree. For example, add to .bashrc the line below:

% export ANLNEXT_TOP=/path/to/ANLNEXT

**************************************************
*
*   6. Documentation
*
**************************************************

http://www.astro.isas.jaxa.jp/~odaka/anlnext/
